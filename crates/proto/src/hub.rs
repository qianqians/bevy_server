// Autogenerated by Thrift Compiler (0.18.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

use crate::common;

//
// NtfClientRequestService
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct NtfClientRequestService {
  pub service_name: Option<String>,
  pub gate_name: Option<String>,
  pub conn_id: Option<String>,
  pub client_info: Option<Vec<u8>>,
}

impl NtfClientRequestService {
  pub fn new<F1, F2, F3, F4>(service_name: F1, gate_name: F2, conn_id: F3, client_info: F4) -> NtfClientRequestService where F1: Into<Option<String>>, F2: Into<Option<String>>, F3: Into<Option<String>>, F4: Into<Option<Vec<u8>>> {
    NtfClientRequestService {
      service_name: service_name.into(),
      gate_name: gate_name.into(),
      conn_id: conn_id.into(),
      client_info: client_info.into(),
    }
  }
}

impl TSerializable for NtfClientRequestService {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<NtfClientRequestService> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = Some("".to_owned());
    let mut f_2: Option<String> = Some("".to_owned());
    let mut f_3: Option<String> = Some("".to_owned());
    let mut f_4: Option<Vec<u8>> = Some(Vec::new());
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_string()?;
          f_3 = Some(val);
        },
        4 => {
          let val = i_prot.read_bytes()?;
          f_4 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = NtfClientRequestService {
      service_name: f_1,
      gate_name: f_2,
      conn_id: f_3,
      client_info: f_4,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ntf_client_request_service");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.service_name {
      o_prot.write_field_begin(&TFieldIdentifier::new("service_name", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.gate_name {
      o_prot.write_field_begin(&TFieldIdentifier::new("gate_name", TType::String, 2))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.conn_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("conn_id", TType::String, 3))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.client_info {
      o_prot.write_field_begin(&TFieldIdentifier::new("client_info", TType::String, 4))?;
      o_prot.write_bytes(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// NtfTransferMsgEnd
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct NtfTransferMsgEnd {
  pub entity_id: Option<String>,
}

impl NtfTransferMsgEnd {
  pub fn new<F1>(entity_id: F1) -> NtfTransferMsgEnd where F1: Into<Option<String>> {
    NtfTransferMsgEnd {
      entity_id: entity_id.into(),
    }
  }
}

impl TSerializable for NtfTransferMsgEnd {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<NtfTransferMsgEnd> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = Some("".to_owned());
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = NtfTransferMsgEnd {
      entity_id: f_1,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ntf_transfer_msg_end");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.entity_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("entity_id", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// CallRpc
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct CallRpc {
  pub entity_id: Option<String>,
  pub msg_cb_id: Option<i64>,
  pub message: Option<common::Msg>,
}

impl CallRpc {
  pub fn new<F1, F2, F3>(entity_id: F1, msg_cb_id: F2, message: F3) -> CallRpc where F1: Into<Option<String>>, F2: Into<Option<i64>>, F3: Into<Option<common::Msg>> {
    CallRpc {
      entity_id: entity_id.into(),
      msg_cb_id: msg_cb_id.into(),
      message: message.into(),
    }
  }
}

impl TSerializable for CallRpc {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<CallRpc> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = Some("".to_owned());
    let mut f_2: Option<i64> = Some(0);
    let mut f_3: Option<common::Msg> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        3 => {
          let val = common::Msg::read_from_in_protocol(i_prot)?;
          f_3 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = CallRpc {
      entity_id: f_1,
      msg_cb_id: f_2,
      message: f_3,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("call_rpc");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.entity_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("entity_id", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.msg_cb_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("msg_cb_id", TType::I64, 2))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.message {
      o_prot.write_field_begin(&TFieldIdentifier::new("message", TType::Struct, 3))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// CallRsp
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct CallRsp {
  pub rsp: Option<common::RpcRsp>,
}

impl CallRsp {
  pub fn new<F1>(rsp: F1) -> CallRsp where F1: Into<Option<common::RpcRsp>> {
    CallRsp {
      rsp: rsp.into(),
    }
  }
}

impl TSerializable for CallRsp {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<CallRsp> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<common::RpcRsp> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = common::RpcRsp::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = CallRsp {
      rsp: f_1,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("call_rsp");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.rsp {
      o_prot.write_field_begin(&TFieldIdentifier::new("rsp", TType::Struct, 1))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// CallErr
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct CallErr {
  pub err: Option<common::RpcErr>,
}

impl CallErr {
  pub fn new<F1>(err: F1) -> CallErr where F1: Into<Option<common::RpcErr>> {
    CallErr {
      err: err.into(),
    }
  }
}

impl TSerializable for CallErr {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<CallErr> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<common::RpcErr> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = common::RpcErr::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = CallErr {
      err: f_1,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("call_err");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.err {
      o_prot.write_field_begin(&TFieldIdentifier::new("err", TType::Struct, 1))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// HubGateService
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum HubGateService {
  ClientRequestService(NtfClientRequestService),
  TransferMsgEnd(NtfTransferMsgEnd),
  CallRpc(CallRpc),
  CallRsp(CallRsp),
  CallErr(CallErr),
}

impl TSerializable for HubGateService {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubGateService> {
    let mut ret: Option<HubGateService> = None;
    let mut received_field_count = 0;
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = NtfClientRequestService::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(HubGateService::ClientRequestService(val));
          }
          received_field_count += 1;
        },
        2 => {
          let val = NtfTransferMsgEnd::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(HubGateService::TransferMsgEnd(val));
          }
          received_field_count += 1;
        },
        3 => {
          let val = CallRpc::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(HubGateService::CallRpc(val));
          }
          received_field_count += 1;
        },
        4 => {
          let val = CallRsp::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(HubGateService::CallRsp(val));
          }
          received_field_count += 1;
        },
        5 => {
          let val = CallErr::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(HubGateService::CallErr(val));
          }
          received_field_count += 1;
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
          received_field_count += 1;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    if received_field_count == 0 {
      Err(
        thrift::Error::Protocol(
          ProtocolError::new(
            ProtocolErrorKind::InvalidData,
            "received empty union from remote HubGateService"
          )
        )
      )
    } else if received_field_count > 1 {
      Err(
        thrift::Error::Protocol(
          ProtocolError::new(
            ProtocolErrorKind::InvalidData,
            "received multiple fields for union from remote HubGateService"
          )
        )
      )
    } else {
      Ok(ret.expect("return value should have been constructed"))
    }
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("hub_gate_service");
    o_prot.write_struct_begin(&struct_ident)?;
    match *self {
      HubGateService::ClientRequestService(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("client_request_service", TType::Struct, 1))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      HubGateService::TransferMsgEnd(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("transfer_msg_end", TType::Struct, 2))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      HubGateService::CallRpc(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("call_rpc", TType::Struct, 3))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      HubGateService::CallRsp(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("call_rsp", TType::Struct, 4))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      HubGateService::CallErr(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("call_err", TType::Struct, 5))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// AckGetGuid
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct AckGetGuid {
  pub callback_id: Option<String>,
  pub guid: Option<i64>,
}

impl AckGetGuid {
  pub fn new<F1, F2>(callback_id: F1, guid: F2) -> AckGetGuid where F1: Into<Option<String>>, F2: Into<Option<i64>> {
    AckGetGuid {
      callback_id: callback_id.into(),
      guid: guid.into(),
    }
  }
}

impl TSerializable for AckGetGuid {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<AckGetGuid> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = Some("".to_owned());
    let mut f_2: Option<i64> = Some(0);
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i64()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = AckGetGuid {
      callback_id: f_1,
      guid: f_2,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ack_get_guid");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.callback_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("callback_id", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.guid {
      o_prot.write_field_begin(&TFieldIdentifier::new("guid", TType::I64, 2))?;
      o_prot.write_i64(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// AckCreateObject
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct AckCreateObject {
  pub callback_id: Option<String>,
  pub result: Option<bool>,
}

impl AckCreateObject {
  pub fn new<F1, F2>(callback_id: F1, result: F2) -> AckCreateObject where F1: Into<Option<String>>, F2: Into<Option<bool>> {
    AckCreateObject {
      callback_id: callback_id.into(),
      result: result.into(),
    }
  }
}

impl TSerializable for AckCreateObject {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<AckCreateObject> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = Some("".to_owned());
    let mut f_2: Option<bool> = Some(false);
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_bool()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = AckCreateObject {
      callback_id: f_1,
      result: f_2,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ack_create_object");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.callback_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("callback_id", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.result {
      o_prot.write_field_begin(&TFieldIdentifier::new("result", TType::Bool, 2))?;
      o_prot.write_bool(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// AckUpdataObject
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct AckUpdataObject {
  pub callback_id: Option<String>,
  pub result: Option<bool>,
}

impl AckUpdataObject {
  pub fn new<F1, F2>(callback_id: F1, result: F2) -> AckUpdataObject where F1: Into<Option<String>>, F2: Into<Option<bool>> {
    AckUpdataObject {
      callback_id: callback_id.into(),
      result: result.into(),
    }
  }
}

impl TSerializable for AckUpdataObject {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<AckUpdataObject> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = Some("".to_owned());
    let mut f_2: Option<bool> = Some(false);
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_bool()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = AckUpdataObject {
      callback_id: f_1,
      result: f_2,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ack_updata_object");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.callback_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("callback_id", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.result {
      o_prot.write_field_begin(&TFieldIdentifier::new("result", TType::Bool, 2))?;
      o_prot.write_bool(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// AckFindAndModify
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct AckFindAndModify {
  pub callback_id: Option<String>,
  pub object_info: Option<Vec<u8>>,
}

impl AckFindAndModify {
  pub fn new<F1, F2>(callback_id: F1, object_info: F2) -> AckFindAndModify where F1: Into<Option<String>>, F2: Into<Option<Vec<u8>>> {
    AckFindAndModify {
      callback_id: callback_id.into(),
      object_info: object_info.into(),
    }
  }
}

impl TSerializable for AckFindAndModify {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<AckFindAndModify> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = Some("".to_owned());
    let mut f_2: Option<Vec<u8>> = Some(Vec::new());
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_bytes()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = AckFindAndModify {
      callback_id: f_1,
      object_info: f_2,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ack_find_and_modify");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.callback_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("callback_id", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.object_info {
      o_prot.write_field_begin(&TFieldIdentifier::new("object_info", TType::String, 2))?;
      o_prot.write_bytes(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// AckRemoveObject
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct AckRemoveObject {
  pub callback_id: Option<String>,
  pub result: Option<bool>,
}

impl AckRemoveObject {
  pub fn new<F1, F2>(callback_id: F1, result: F2) -> AckRemoveObject where F1: Into<Option<String>>, F2: Into<Option<bool>> {
    AckRemoveObject {
      callback_id: callback_id.into(),
      result: result.into(),
    }
  }
}

impl TSerializable for AckRemoveObject {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<AckRemoveObject> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = Some("".to_owned());
    let mut f_2: Option<bool> = Some(false);
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_bool()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = AckRemoveObject {
      callback_id: f_1,
      result: f_2,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ack_remove_object");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.callback_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("callback_id", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.result {
      o_prot.write_field_begin(&TFieldIdentifier::new("result", TType::Bool, 2))?;
      o_prot.write_bool(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// AckGetObjectCount
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct AckGetObjectCount {
  pub callback_id: Option<String>,
  pub count: Option<i32>,
}

impl AckGetObjectCount {
  pub fn new<F1, F2>(callback_id: F1, count: F2) -> AckGetObjectCount where F1: Into<Option<String>>, F2: Into<Option<i32>> {
    AckGetObjectCount {
      callback_id: callback_id.into(),
      count: count.into(),
    }
  }
}

impl TSerializable for AckGetObjectCount {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<AckGetObjectCount> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = Some("".to_owned());
    let mut f_2: Option<i32> = Some(0);
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_i32()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = AckGetObjectCount {
      callback_id: f_1,
      count: f_2,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ack_get_object_count");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.callback_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("callback_id", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(fld_var) = self.count {
      o_prot.write_field_begin(&TFieldIdentifier::new("count", TType::I32, 2))?;
      o_prot.write_i32(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// AckGetObjectInfo
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct AckGetObjectInfo {
  pub callback_id: Option<String>,
  pub object_info: Option<Vec<u8>>,
}

impl AckGetObjectInfo {
  pub fn new<F1, F2>(callback_id: F1, object_info: F2) -> AckGetObjectInfo where F1: Into<Option<String>>, F2: Into<Option<Vec<u8>>> {
    AckGetObjectInfo {
      callback_id: callback_id.into(),
      object_info: object_info.into(),
    }
  }
}

impl TSerializable for AckGetObjectInfo {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<AckGetObjectInfo> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = Some("".to_owned());
    let mut f_2: Option<Vec<u8>> = Some(Vec::new());
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_bytes()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = AckGetObjectInfo {
      callback_id: f_1,
      object_info: f_2,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ack_get_object_info");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.callback_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("callback_id", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.object_info {
      o_prot.write_field_begin(&TFieldIdentifier::new("object_info", TType::String, 2))?;
      o_prot.write_bytes(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// AckGetObjectInfoEnd
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct AckGetObjectInfoEnd {
  pub callback_id: Option<String>,
}

impl AckGetObjectInfoEnd {
  pub fn new<F1>(callback_id: F1) -> AckGetObjectInfoEnd where F1: Into<Option<String>> {
    AckGetObjectInfoEnd {
      callback_id: callback_id.into(),
    }
  }
}

impl TSerializable for AckGetObjectInfoEnd {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<AckGetObjectInfoEnd> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = Some("".to_owned());
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = AckGetObjectInfoEnd {
      callback_id: f_1,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ack_get_object_info_end");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.callback_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("callback_id", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// DbCallback
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum DbCallback {
  GetGuid(AckGetGuid),
  CreateObject(AckCreateObject),
  UpdataObject(AckUpdataObject),
  FindAndModify(AckFindAndModify),
  RemoveObject(AckRemoveObject),
  GetObjectCount(AckGetObjectCount),
  GetObjectInfo(AckGetObjectInfo),
  GetObjectInfoEnd(AckGetObjectInfoEnd),
}

impl TSerializable for DbCallback {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<DbCallback> {
    let mut ret: Option<DbCallback> = None;
    let mut received_field_count = 0;
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = AckGetGuid::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(DbCallback::GetGuid(val));
          }
          received_field_count += 1;
        },
        2 => {
          let val = AckCreateObject::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(DbCallback::CreateObject(val));
          }
          received_field_count += 1;
        },
        3 => {
          let val = AckUpdataObject::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(DbCallback::UpdataObject(val));
          }
          received_field_count += 1;
        },
        4 => {
          let val = AckFindAndModify::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(DbCallback::FindAndModify(val));
          }
          received_field_count += 1;
        },
        5 => {
          let val = AckRemoveObject::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(DbCallback::RemoveObject(val));
          }
          received_field_count += 1;
        },
        6 => {
          let val = AckGetObjectCount::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(DbCallback::GetObjectCount(val));
          }
          received_field_count += 1;
        },
        7 => {
          let val = AckGetObjectInfo::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(DbCallback::GetObjectInfo(val));
          }
          received_field_count += 1;
        },
        8 => {
          let val = AckGetObjectInfoEnd::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(DbCallback::GetObjectInfoEnd(val));
          }
          received_field_count += 1;
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
          received_field_count += 1;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    if received_field_count == 0 {
      Err(
        thrift::Error::Protocol(
          ProtocolError::new(
            ProtocolErrorKind::InvalidData,
            "received empty union from remote DbCallback"
          )
        )
      )
    } else if received_field_count > 1 {
      Err(
        thrift::Error::Protocol(
          ProtocolError::new(
            ProtocolErrorKind::InvalidData,
            "received multiple fields for union from remote DbCallback"
          )
        )
      )
    } else {
      Ok(ret.expect("return value should have been constructed"))
    }
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("db_callback");
    o_prot.write_struct_begin(&struct_ident)?;
    match *self {
      DbCallback::GetGuid(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("get_guid", TType::Struct, 1))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      DbCallback::CreateObject(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("create_object", TType::Struct, 2))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      DbCallback::UpdataObject(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("updata_object", TType::Struct, 3))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      DbCallback::FindAndModify(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("find_and_modify", TType::Struct, 4))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      DbCallback::RemoveObject(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("remove_object", TType::Struct, 5))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      DbCallback::GetObjectCount(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("get_object_count", TType::Struct, 6))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      DbCallback::GetObjectInfo(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("get_object_info", TType::Struct, 7))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      DbCallback::GetObjectInfoEnd(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("get_object_info_end", TType::Struct, 8))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// hub service client
//

pub trait THubSyncClient {
  fn reg_hub(&mut self, hub_name: String, hub_type: String) -> thrift::Result<bool>;
}

pub trait THubSyncClientMarker {}

pub struct HubSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  _i_prot: IP,
  _o_prot: OP,
  _sequence_number: i32,
}

impl <IP, OP> HubSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  pub fn new(input_protocol: IP, output_protocol: OP) -> HubSyncClient<IP, OP> {
    HubSyncClient { _i_prot: input_protocol, _o_prot: output_protocol, _sequence_number: 0 }
  }
}

impl <IP, OP> TThriftClient for HubSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  fn i_prot_mut(&mut self) -> &mut dyn TInputProtocol { &mut self._i_prot }
  fn o_prot_mut(&mut self) -> &mut dyn TOutputProtocol { &mut self._o_prot }
  fn sequence_number(&self) -> i32 { self._sequence_number }
  fn increment_sequence_number(&mut self) -> i32 { self._sequence_number += 1; self._sequence_number }
}

impl <IP, OP> THubSyncClientMarker for HubSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}

impl <C: TThriftClient + THubSyncClientMarker> THubSyncClient for C {
  fn reg_hub(&mut self, hub_name: String, hub_type: String) -> thrift::Result<bool> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("reg_hub", TMessageType::Call, self.sequence_number());
        let call_args = HubRegHubArgs { hub_name, hub_type };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("reg_hub", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = HubRegHubResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
}

//
// hub service processor
//

pub trait HubSyncHandler {
  fn handle_reg_hub(&self, hub_name: String, hub_type: String) -> thrift::Result<bool>;
}

pub struct HubSyncProcessor<H: HubSyncHandler> {
  handler: H,
}

impl <H: HubSyncHandler> HubSyncProcessor<H> {
  pub fn new(handler: H) -> HubSyncProcessor<H> {
    HubSyncProcessor {
      handler,
    }
  }
  fn process_reg_hub(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    THubProcessFunctions::process_reg_hub(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
}

pub struct THubProcessFunctions;

impl THubProcessFunctions {
  pub fn process_reg_hub<H: HubSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = HubRegHubArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_reg_hub(args.hub_name, args.hub_type) {
      Ok(handler_return) => {
        let message_ident = TMessageIdentifier::new("reg_hub", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = HubRegHubResult { result_value: Some(handler_return) };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("reg_hub", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("reg_hub", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
}

impl <H: HubSyncHandler> TProcessor for HubSyncProcessor<H> {
  fn process(&self, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let message_ident = i_prot.read_message_begin()?;
    let res = match &*message_ident.name {
      "reg_hub" => {
        self.process_reg_hub(message_ident.sequence_number, i_prot, o_prot)
      },
      method => {
        Err(
          thrift::Error::Application(
            ApplicationError::new(
              ApplicationErrorKind::UnknownMethod,
              format!("unknown method {}", method)
            )
          )
        )
      },
    };
    thrift::server::handle_process_result(&message_ident, res, o_prot)
  }
}

//
// HubRegHubArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HubRegHubArgs {
  hub_name: String,
  hub_type: String,
}

impl HubRegHubArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubRegHubArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    let mut f_2: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("HubRegHubArgs.hub_name", &f_1)?;
    verify_required_field_exists("HubRegHubArgs.hub_type", &f_2)?;
    let ret = HubRegHubArgs {
      hub_name: f_1.expect("auto-generated code should have checked for presence of required fields"),
      hub_type: f_2.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("reg_hub_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("hub_name", TType::String, 1))?;
    o_prot.write_string(&self.hub_name)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("hub_type", TType::String, 2))?;
    o_prot.write_string(&self.hub_type)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// HubRegHubResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HubRegHubResult {
  result_value: Option<bool>,
}

impl HubRegHubResult {
  fn ok_or(self) -> thrift::Result<bool> {
    if self.result_value.is_some() {
      Ok(self.result_value.unwrap())
    } else {
      Err(
        thrift::Error::Application(
          ApplicationError::new(
            ApplicationErrorKind::MissingResult,
            "no result received for HubRegHub"
          )
        )
      )
    }
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubRegHubResult> {
    i_prot.read_struct_begin()?;
    let mut f_0: Option<bool> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        0 => {
          let val = i_prot.read_bool()?;
          f_0 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = HubRegHubResult {
      result_value: f_0,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("HubRegHubResult");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(fld_var) = self.result_value {
      o_prot.write_field_begin(&TFieldIdentifier::new("result_value", TType::Bool, 0))?;
      o_prot.write_bool(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// hub_transfer_control service client
//

pub trait THubTransferControlSyncClient {
  fn ntf_transfer(&mut self, entity_id: String) -> thrift::Result<()>;
  fn ack_transfer(&mut self, entity_id: String) -> thrift::Result<()>;
  fn ntf_client_conn_info(&mut self, entity_id: String, gate_name: String, conn_id: String) -> thrift::Result<()>;
}

pub trait THubTransferControlSyncClientMarker {}

pub struct HubTransferControlSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  _i_prot: IP,
  _o_prot: OP,
  _sequence_number: i32,
}

impl <IP, OP> HubTransferControlSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  pub fn new(input_protocol: IP, output_protocol: OP) -> HubTransferControlSyncClient<IP, OP> {
    HubTransferControlSyncClient { _i_prot: input_protocol, _o_prot: output_protocol, _sequence_number: 0 }
  }
}

impl <IP, OP> TThriftClient for HubTransferControlSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  fn i_prot_mut(&mut self) -> &mut dyn TInputProtocol { &mut self._i_prot }
  fn o_prot_mut(&mut self) -> &mut dyn TOutputProtocol { &mut self._o_prot }
  fn sequence_number(&self) -> i32 { self._sequence_number }
  fn increment_sequence_number(&mut self) -> i32 { self._sequence_number += 1; self._sequence_number }
}

impl <IP, OP> THubTransferControlSyncClientMarker for HubTransferControlSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}

impl <C: TThriftClient + THubTransferControlSyncClientMarker> THubTransferControlSyncClient for C {
  fn ntf_transfer(&mut self, entity_id: String) -> thrift::Result<()> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("ntf_transfer", TMessageType::Call, self.sequence_number());
        let call_args = HubTransferControlNtfTransferArgs { entity_id };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("ntf_transfer", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = HubTransferControlNtfTransferResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn ack_transfer(&mut self, entity_id: String) -> thrift::Result<()> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("ack_transfer", TMessageType::Call, self.sequence_number());
        let call_args = HubTransferControlAckTransferArgs { entity_id };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("ack_transfer", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = HubTransferControlAckTransferResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn ntf_client_conn_info(&mut self, entity_id: String, gate_name: String, conn_id: String) -> thrift::Result<()> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("ntf_client_conn_info", TMessageType::Call, self.sequence_number());
        let call_args = HubTransferControlNtfClientConnInfoArgs { entity_id, gate_name, conn_id };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("ntf_client_conn_info", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = HubTransferControlNtfClientConnInfoResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
}

//
// hub_transfer_control service processor
//

pub trait HubTransferControlSyncHandler {
  fn handle_ntf_transfer(&self, entity_id: String) -> thrift::Result<()>;
  fn handle_ack_transfer(&self, entity_id: String) -> thrift::Result<()>;
  fn handle_ntf_client_conn_info(&self, entity_id: String, gate_name: String, conn_id: String) -> thrift::Result<()>;
}

pub struct HubTransferControlSyncProcessor<H: HubTransferControlSyncHandler> {
  handler: H,
}

impl <H: HubTransferControlSyncHandler> HubTransferControlSyncProcessor<H> {
  pub fn new(handler: H) -> HubTransferControlSyncProcessor<H> {
    HubTransferControlSyncProcessor {
      handler,
    }
  }
  fn process_ntf_transfer(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    THubTransferControlProcessFunctions::process_ntf_transfer(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_ack_transfer(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    THubTransferControlProcessFunctions::process_ack_transfer(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_ntf_client_conn_info(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    THubTransferControlProcessFunctions::process_ntf_client_conn_info(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
}

pub struct THubTransferControlProcessFunctions;

impl THubTransferControlProcessFunctions {
  pub fn process_ntf_transfer<H: HubTransferControlSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = HubTransferControlNtfTransferArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_ntf_transfer(args.entity_id) {
      Ok(_) => {
        let message_ident = TMessageIdentifier::new("ntf_transfer", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = HubTransferControlNtfTransferResult {  };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("ntf_transfer", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("ntf_transfer", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_ack_transfer<H: HubTransferControlSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = HubTransferControlAckTransferArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_ack_transfer(args.entity_id) {
      Ok(_) => {
        let message_ident = TMessageIdentifier::new("ack_transfer", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = HubTransferControlAckTransferResult {  };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("ack_transfer", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("ack_transfer", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_ntf_client_conn_info<H: HubTransferControlSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = HubTransferControlNtfClientConnInfoArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_ntf_client_conn_info(args.entity_id, args.gate_name, args.conn_id) {
      Ok(_) => {
        let message_ident = TMessageIdentifier::new("ntf_client_conn_info", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = HubTransferControlNtfClientConnInfoResult {  };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("ntf_client_conn_info", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("ntf_client_conn_info", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
}

impl <H: HubTransferControlSyncHandler> TProcessor for HubTransferControlSyncProcessor<H> {
  fn process(&self, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let message_ident = i_prot.read_message_begin()?;
    let res = match &*message_ident.name {
      "ntf_transfer" => {
        self.process_ntf_transfer(message_ident.sequence_number, i_prot, o_prot)
      },
      "ack_transfer" => {
        self.process_ack_transfer(message_ident.sequence_number, i_prot, o_prot)
      },
      "ntf_client_conn_info" => {
        self.process_ntf_client_conn_info(message_ident.sequence_number, i_prot, o_prot)
      },
      method => {
        Err(
          thrift::Error::Application(
            ApplicationError::new(
              ApplicationErrorKind::UnknownMethod,
              format!("unknown method {}", method)
            )
          )
        )
      },
    };
    thrift::server::handle_process_result(&message_ident, res, o_prot)
  }
}

//
// HubTransferControlNtfTransferArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HubTransferControlNtfTransferArgs {
  entity_id: String,
}

impl HubTransferControlNtfTransferArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubTransferControlNtfTransferArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("HubTransferControlNtfTransferArgs.entity_id", &f_1)?;
    let ret = HubTransferControlNtfTransferArgs {
      entity_id: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ntf_transfer_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("entity_id", TType::String, 1))?;
    o_prot.write_string(&self.entity_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// HubTransferControlNtfTransferResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HubTransferControlNtfTransferResult {
}

impl HubTransferControlNtfTransferResult {
  fn ok_or(self) -> thrift::Result<()> {
    Ok(())
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubTransferControlNtfTransferResult> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = HubTransferControlNtfTransferResult {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("HubTransferControlNtfTransferResult");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// HubTransferControlAckTransferArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HubTransferControlAckTransferArgs {
  entity_id: String,
}

impl HubTransferControlAckTransferArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubTransferControlAckTransferArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("HubTransferControlAckTransferArgs.entity_id", &f_1)?;
    let ret = HubTransferControlAckTransferArgs {
      entity_id: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ack_transfer_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("entity_id", TType::String, 1))?;
    o_prot.write_string(&self.entity_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// HubTransferControlAckTransferResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HubTransferControlAckTransferResult {
}

impl HubTransferControlAckTransferResult {
  fn ok_or(self) -> thrift::Result<()> {
    Ok(())
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubTransferControlAckTransferResult> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = HubTransferControlAckTransferResult {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("HubTransferControlAckTransferResult");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// HubTransferControlNtfClientConnInfoArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HubTransferControlNtfClientConnInfoArgs {
  entity_id: String,
  gate_name: String,
  conn_id: String,
}

impl HubTransferControlNtfClientConnInfoArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubTransferControlNtfClientConnInfoArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = None;
    let mut f_2: Option<String> = None;
    let mut f_3: Option<String> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_string()?;
          f_2 = Some(val);
        },
        3 => {
          let val = i_prot.read_string()?;
          f_3 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("HubTransferControlNtfClientConnInfoArgs.entity_id", &f_1)?;
    verify_required_field_exists("HubTransferControlNtfClientConnInfoArgs.gate_name", &f_2)?;
    verify_required_field_exists("HubTransferControlNtfClientConnInfoArgs.conn_id", &f_3)?;
    let ret = HubTransferControlNtfClientConnInfoArgs {
      entity_id: f_1.expect("auto-generated code should have checked for presence of required fields"),
      gate_name: f_2.expect("auto-generated code should have checked for presence of required fields"),
      conn_id: f_3.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("ntf_client_conn_info_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("entity_id", TType::String, 1))?;
    o_prot.write_string(&self.entity_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("gate_name", TType::String, 2))?;
    o_prot.write_string(&self.gate_name)?;
    o_prot.write_field_end()?;
    o_prot.write_field_begin(&TFieldIdentifier::new("conn_id", TType::String, 3))?;
    o_prot.write_string(&self.conn_id)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// HubTransferControlNtfClientConnInfoResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HubTransferControlNtfClientConnInfoResult {
}

impl HubTransferControlNtfClientConnInfoResult {
  fn ok_or(self) -> thrift::Result<()> {
    Ok(())
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubTransferControlNtfClientConnInfoResult> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = HubTransferControlNtfClientConnInfoResult {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("HubTransferControlNtfClientConnInfoResult");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// hub_call_hub service client
//

pub trait THubCallHubSyncClient {
  fn call_rpc(&mut self, message: common::Msg) -> thrift::Result<()>;
  fn call_rsp(&mut self, rsp: common::RpcRsp) -> thrift::Result<()>;
  fn call_err(&mut self, err: common::RpcErr) -> thrift::Result<()>;
}

pub trait THubCallHubSyncClientMarker {}

pub struct HubCallHubSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  _i_prot: IP,
  _o_prot: OP,
  _sequence_number: i32,
}

impl <IP, OP> HubCallHubSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  pub fn new(input_protocol: IP, output_protocol: OP) -> HubCallHubSyncClient<IP, OP> {
    HubCallHubSyncClient { _i_prot: input_protocol, _o_prot: output_protocol, _sequence_number: 0 }
  }
}

impl <IP, OP> TThriftClient for HubCallHubSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {
  fn i_prot_mut(&mut self) -> &mut dyn TInputProtocol { &mut self._i_prot }
  fn o_prot_mut(&mut self) -> &mut dyn TOutputProtocol { &mut self._o_prot }
  fn sequence_number(&self) -> i32 { self._sequence_number }
  fn increment_sequence_number(&mut self) -> i32 { self._sequence_number += 1; self._sequence_number }
}

impl <IP, OP> THubCallHubSyncClientMarker for HubCallHubSyncClient<IP, OP> where IP: TInputProtocol, OP: TOutputProtocol {}

impl <C: TThriftClient + THubCallHubSyncClientMarker> THubCallHubSyncClient for C {
  fn call_rpc(&mut self, message: common::Msg) -> thrift::Result<()> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("call_rpc", TMessageType::Call, self.sequence_number());
        let call_args = HubCallHubCallRpcArgs { message };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("call_rpc", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = HubCallHubCallRpcResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn call_rsp(&mut self, rsp: common::RpcRsp) -> thrift::Result<()> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("call_rsp", TMessageType::Call, self.sequence_number());
        let call_args = HubCallHubCallRspArgs { rsp };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("call_rsp", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = HubCallHubCallRspResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
  fn call_err(&mut self, err: common::RpcErr) -> thrift::Result<()> {
    (
      {
        self.increment_sequence_number();
        let message_ident = TMessageIdentifier::new("call_err", TMessageType::Call, self.sequence_number());
        let call_args = HubCallHubCallErrArgs { err };
        self.o_prot_mut().write_message_begin(&message_ident)?;
        call_args.write_to_out_protocol(self.o_prot_mut())?;
        self.o_prot_mut().write_message_end()?;
        self.o_prot_mut().flush()
      }
    )?;
    {
      let message_ident = self.i_prot_mut().read_message_begin()?;
      verify_expected_sequence_number(self.sequence_number(), message_ident.sequence_number)?;
      verify_expected_service_call("call_err", &message_ident.name)?;
      if message_ident.message_type == TMessageType::Exception {
        let remote_error = thrift::Error::read_application_error_from_in_protocol(self.i_prot_mut())?;
        self.i_prot_mut().read_message_end()?;
        return Err(thrift::Error::Application(remote_error))
      }
      verify_expected_message_type(TMessageType::Reply, message_ident.message_type)?;
      let result = HubCallHubCallErrResult::read_from_in_protocol(self.i_prot_mut())?;
      self.i_prot_mut().read_message_end()?;
      result.ok_or()
    }
  }
}

//
// hub_call_hub service processor
//

pub trait HubCallHubSyncHandler {
  fn handle_call_rpc(&self, message: common::Msg) -> thrift::Result<()>;
  fn handle_call_rsp(&self, rsp: common::RpcRsp) -> thrift::Result<()>;
  fn handle_call_err(&self, err: common::RpcErr) -> thrift::Result<()>;
}

pub struct HubCallHubSyncProcessor<H: HubCallHubSyncHandler> {
  handler: H,
}

impl <H: HubCallHubSyncHandler> HubCallHubSyncProcessor<H> {
  pub fn new(handler: H) -> HubCallHubSyncProcessor<H> {
    HubCallHubSyncProcessor {
      handler,
    }
  }
  fn process_call_rpc(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    THubCallHubProcessFunctions::process_call_rpc(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_call_rsp(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    THubCallHubProcessFunctions::process_call_rsp(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
  fn process_call_err(&self, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    THubCallHubProcessFunctions::process_call_err(&self.handler, incoming_sequence_number, i_prot, o_prot)
  }
}

pub struct THubCallHubProcessFunctions;

impl THubCallHubProcessFunctions {
  pub fn process_call_rpc<H: HubCallHubSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = HubCallHubCallRpcArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_call_rpc(args.message) {
      Ok(_) => {
        let message_ident = TMessageIdentifier::new("call_rpc", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = HubCallHubCallRpcResult {  };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("call_rpc", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("call_rpc", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_call_rsp<H: HubCallHubSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = HubCallHubCallRspArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_call_rsp(args.rsp) {
      Ok(_) => {
        let message_ident = TMessageIdentifier::new("call_rsp", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = HubCallHubCallRspResult {  };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("call_rsp", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("call_rsp", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
  pub fn process_call_err<H: HubCallHubSyncHandler>(handler: &H, incoming_sequence_number: i32, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let args = HubCallHubCallErrArgs::read_from_in_protocol(i_prot)?;
    match handler.handle_call_err(args.err) {
      Ok(_) => {
        let message_ident = TMessageIdentifier::new("call_err", TMessageType::Reply, incoming_sequence_number);
        o_prot.write_message_begin(&message_ident)?;
        let ret = HubCallHubCallErrResult {  };
        ret.write_to_out_protocol(o_prot)?;
        o_prot.write_message_end()?;
        o_prot.flush()
      },
      Err(e) => {
        match e {
          thrift::Error::Application(app_err) => {
            let message_ident = TMessageIdentifier::new("call_err", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&app_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
          _ => {
            let ret_err = {
              ApplicationError::new(
                ApplicationErrorKind::Unknown,
                e.to_string()
              )
            };
            let message_ident = TMessageIdentifier::new("call_err", TMessageType::Exception, incoming_sequence_number);
            o_prot.write_message_begin(&message_ident)?;
            thrift::Error::write_application_error_to_out_protocol(&ret_err, o_prot)?;
            o_prot.write_message_end()?;
            o_prot.flush()
          },
        }
      },
    }
  }
}

impl <H: HubCallHubSyncHandler> TProcessor for HubCallHubSyncProcessor<H> {
  fn process(&self, i_prot: &mut dyn TInputProtocol, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let message_ident = i_prot.read_message_begin()?;
    let res = match &*message_ident.name {
      "call_rpc" => {
        self.process_call_rpc(message_ident.sequence_number, i_prot, o_prot)
      },
      "call_rsp" => {
        self.process_call_rsp(message_ident.sequence_number, i_prot, o_prot)
      },
      "call_err" => {
        self.process_call_err(message_ident.sequence_number, i_prot, o_prot)
      },
      method => {
        Err(
          thrift::Error::Application(
            ApplicationError::new(
              ApplicationErrorKind::UnknownMethod,
              format!("unknown method {}", method)
            )
          )
        )
      },
    };
    thrift::server::handle_process_result(&message_ident, res, o_prot)
  }
}

//
// HubCallHubCallRpcArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HubCallHubCallRpcArgs {
  message: common::Msg,
}

impl HubCallHubCallRpcArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubCallHubCallRpcArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<common::Msg> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = common::Msg::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("HubCallHubCallRpcArgs.message", &f_1)?;
    let ret = HubCallHubCallRpcArgs {
      message: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("call_rpc_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("message", TType::Struct, 1))?;
    self.message.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// HubCallHubCallRpcResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HubCallHubCallRpcResult {
}

impl HubCallHubCallRpcResult {
  fn ok_or(self) -> thrift::Result<()> {
    Ok(())
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubCallHubCallRpcResult> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = HubCallHubCallRpcResult {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("HubCallHubCallRpcResult");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// HubCallHubCallRspArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HubCallHubCallRspArgs {
  rsp: common::RpcRsp,
}

impl HubCallHubCallRspArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubCallHubCallRspArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<common::RpcRsp> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = common::RpcRsp::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("HubCallHubCallRspArgs.rsp", &f_1)?;
    let ret = HubCallHubCallRspArgs {
      rsp: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("call_rsp_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("rsp", TType::Struct, 1))?;
    self.rsp.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// HubCallHubCallRspResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HubCallHubCallRspResult {
}

impl HubCallHubCallRspResult {
  fn ok_or(self) -> thrift::Result<()> {
    Ok(())
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubCallHubCallRspResult> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = HubCallHubCallRspResult {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("HubCallHubCallRspResult");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// HubCallHubCallErrArgs
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HubCallHubCallErrArgs {
  err: common::RpcErr,
}

impl HubCallHubCallErrArgs {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubCallHubCallErrArgs> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<common::RpcErr> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = common::RpcErr::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    verify_required_field_exists("HubCallHubCallErrArgs.err", &f_1)?;
    let ret = HubCallHubCallErrArgs {
      err: f_1.expect("auto-generated code should have checked for presence of required fields"),
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("call_err_args");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_begin(&TFieldIdentifier::new("err", TType::Struct, 1))?;
    self.err.write_to_out_protocol(o_prot)?;
    o_prot.write_field_end()?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// HubCallHubCallErrResult
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
struct HubCallHubCallErrResult {
}

impl HubCallHubCallErrResult {
  fn ok_or(self) -> thrift::Result<()> {
    Ok(())
  }
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<HubCallHubCallErrResult> {
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      i_prot.skip(field_ident.field_type)?;
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = HubCallHubCallErrResult {};
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("HubCallHubCallErrResult");
    o_prot.write_struct_begin(&struct_ident)?;
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

