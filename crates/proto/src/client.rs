// Autogenerated by Thrift Compiler (0.18.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

#![allow(dead_code)]
#![allow(unused_imports)]
#![allow(unused_extern_crates)]
#![allow(clippy::too_many_arguments, clippy::type_complexity, clippy::vec_box, clippy::wrong_self_convention)]
#![cfg_attr(rustfmt, rustfmt_skip)]

use std::cell::RefCell;
use std::collections::{BTreeMap, BTreeSet};
use std::convert::{From, TryFrom};
use std::default::Default;
use std::error::Error;
use std::fmt;
use std::fmt::{Display, Formatter};
use std::rc::Rc;

use thrift::OrderedFloat;
use thrift::{ApplicationError, ApplicationErrorKind, ProtocolError, ProtocolErrorKind, TThriftClient};
use thrift::protocol::{TFieldIdentifier, TListIdentifier, TMapIdentifier, TMessageIdentifier, TMessageType, TInputProtocol, TOutputProtocol, TSerializable, TSetIdentifier, TStructIdentifier, TType};
use thrift::protocol::field_id;
use thrift::protocol::verify_expected_message_type;
use thrift::protocol::verify_expected_sequence_number;
use thrift::protocol::verify_expected_service_call;
use thrift::protocol::verify_required_field_exists;
use thrift::server::TProcessor;

use crate::common;

//
// CreateRemoteEntity
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct CreateRemoteEntity {
  pub entity_id: Option<String>,
  pub argvs: Option<Vec<u8>>,
}

impl CreateRemoteEntity {
  pub fn new<F1, F2>(entity_id: F1, argvs: F2) -> CreateRemoteEntity where F1: Into<Option<String>>, F2: Into<Option<Vec<u8>>> {
    CreateRemoteEntity {
      entity_id: entity_id.into(),
      argvs: argvs.into(),
    }
  }
}

impl TSerializable for CreateRemoteEntity {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<CreateRemoteEntity> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<String> = Some("".to_owned());
    let mut f_2: Option<Vec<u8>> = Some(Vec::new());
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = i_prot.read_string()?;
          f_1 = Some(val);
        },
        2 => {
          let val = i_prot.read_bytes()?;
          f_2 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = CreateRemoteEntity {
      entity_id: f_1,
      argvs: f_2,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("create_remote_entity");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.entity_id {
      o_prot.write_field_begin(&TFieldIdentifier::new("entity_id", TType::String, 1))?;
      o_prot.write_string(fld_var)?;
      o_prot.write_field_end()?
    }
    if let Some(ref fld_var) = self.argvs {
      o_prot.write_field_begin(&TFieldIdentifier::new("argvs", TType::String, 2))?;
      o_prot.write_bytes(fld_var)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// CallRpc
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct CallRpc {
  pub message: Option<common::Msg>,
}

impl CallRpc {
  pub fn new<F1>(message: F1) -> CallRpc where F1: Into<Option<common::Msg>> {
    CallRpc {
      message: message.into(),
    }
  }
}

impl TSerializable for CallRpc {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<CallRpc> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<common::Msg> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = common::Msg::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = CallRpc {
      message: f_1,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("call_rpc");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.message {
      o_prot.write_field_begin(&TFieldIdentifier::new("message", TType::Struct, 1))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// CallRsp
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct CallRsp {
  pub rsp: Option<common::RpcRsp>,
}

impl CallRsp {
  pub fn new<F1>(rsp: F1) -> CallRsp where F1: Into<Option<common::RpcRsp>> {
    CallRsp {
      rsp: rsp.into(),
    }
  }
}

impl TSerializable for CallRsp {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<CallRsp> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<common::RpcRsp> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = common::RpcRsp::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = CallRsp {
      rsp: f_1,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("call_rsp");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.rsp {
      o_prot.write_field_begin(&TFieldIdentifier::new("rsp", TType::Struct, 1))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// CallErr
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct CallErr {
  pub err: Option<common::RpcErr>,
}

impl CallErr {
  pub fn new<F1>(err: F1) -> CallErr where F1: Into<Option<common::RpcErr>> {
    CallErr {
      err: err.into(),
    }
  }
}

impl TSerializable for CallErr {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<CallErr> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<common::RpcErr> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = common::RpcErr::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = CallErr {
      err: f_1,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("call_err");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.err {
      o_prot.write_field_begin(&TFieldIdentifier::new("err", TType::Struct, 1))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// CallNtf
//

#[derive(Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct CallNtf {
  pub message: Option<common::Msg>,
}

impl CallNtf {
  pub fn new<F1>(message: F1) -> CallNtf where F1: Into<Option<common::Msg>> {
    CallNtf {
      message: message.into(),
    }
  }
}

impl TSerializable for CallNtf {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<CallNtf> {
    i_prot.read_struct_begin()?;
    let mut f_1: Option<common::Msg> = None;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = common::Msg::read_from_in_protocol(i_prot)?;
          f_1 = Some(val);
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    let ret = CallNtf {
      message: f_1,
    };
    Ok(ret)
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("call_ntf");
    o_prot.write_struct_begin(&struct_ident)?;
    if let Some(ref fld_var) = self.message {
      o_prot.write_field_begin(&TFieldIdentifier::new("message", TType::Struct, 1))?;
      fld_var.write_to_out_protocol(o_prot)?;
      o_prot.write_field_end()?
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

//
// ClientService
//

#[derive(Clone, Debug, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub enum ClientService {
  CreateRemoteEntity(CreateRemoteEntity),
  CallRpc(CallRpc),
  CallRsp(CallRsp),
  CallErr(CallErr),
  CallNtf(CallNtf),
}

impl TSerializable for ClientService {
  fn read_from_in_protocol(i_prot: &mut dyn TInputProtocol) -> thrift::Result<ClientService> {
    let mut ret: Option<ClientService> = None;
    let mut received_field_count = 0;
    i_prot.read_struct_begin()?;
    loop {
      let field_ident = i_prot.read_field_begin()?;
      if field_ident.field_type == TType::Stop {
        break;
      }
      let field_id = field_id(&field_ident)?;
      match field_id {
        1 => {
          let val = CreateRemoteEntity::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(ClientService::CreateRemoteEntity(val));
          }
          received_field_count += 1;
        },
        2 => {
          let val = CallRpc::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(ClientService::CallRpc(val));
          }
          received_field_count += 1;
        },
        3 => {
          let val = CallRsp::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(ClientService::CallRsp(val));
          }
          received_field_count += 1;
        },
        4 => {
          let val = CallErr::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(ClientService::CallErr(val));
          }
          received_field_count += 1;
        },
        5 => {
          let val = CallNtf::read_from_in_protocol(i_prot)?;
          if ret.is_none() {
            ret = Some(ClientService::CallNtf(val));
          }
          received_field_count += 1;
        },
        _ => {
          i_prot.skip(field_ident.field_type)?;
          received_field_count += 1;
        },
      };
      i_prot.read_field_end()?;
    }
    i_prot.read_struct_end()?;
    if received_field_count == 0 {
      Err(
        thrift::Error::Protocol(
          ProtocolError::new(
            ProtocolErrorKind::InvalidData,
            "received empty union from remote ClientService"
          )
        )
      )
    } else if received_field_count > 1 {
      Err(
        thrift::Error::Protocol(
          ProtocolError::new(
            ProtocolErrorKind::InvalidData,
            "received multiple fields for union from remote ClientService"
          )
        )
      )
    } else {
      Ok(ret.expect("return value should have been constructed"))
    }
  }
  fn write_to_out_protocol(&self, o_prot: &mut dyn TOutputProtocol) -> thrift::Result<()> {
    let struct_ident = TStructIdentifier::new("client_service");
    o_prot.write_struct_begin(&struct_ident)?;
    match *self {
      ClientService::CreateRemoteEntity(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("create_remote_entity", TType::Struct, 1))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      ClientService::CallRpc(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("call_rpc", TType::Struct, 2))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      ClientService::CallRsp(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("call_rsp", TType::Struct, 3))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      ClientService::CallErr(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("call_err", TType::Struct, 4))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
      ClientService::CallNtf(ref f) => {
        o_prot.write_field_begin(&TFieldIdentifier::new("call_ntf", TType::Struct, 5))?;
        f.write_to_out_protocol(o_prot)?;
        o_prot.write_field_end()?;
      },
    }
    o_prot.write_field_stop()?;
    o_prot.write_struct_end()
  }
}

